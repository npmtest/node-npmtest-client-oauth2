{"/home/travis/build/npmtest/node-npmtest-client-oauth2/test.js":"/* istanbul instrument in package npmtest_client_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-client-oauth2/lib.npmtest_client_oauth2.js":"/* istanbul instrument in package npmtest_client_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_client_oauth2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_client_oauth2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-client-oauth2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-client-oauth2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_client_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_client_oauth2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_client_oauth2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_client_oauth2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_client_oauth2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_client_oauth2.__dirname + '/lib.npmtest_client_oauth2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-client-oauth2/node_modules/client-oauth2/src/client-oauth2.js":"var Querystring = require('querystring')\nvar Url = require('url')\nvar defaultRequest = require('./request')\n\nvar btoa = typeof Buffer === 'function' ? btoaBuffer : window.btoa\n\n/**\n * Export `ClientOAuth2` class.\n */\nmodule.exports = ClientOAuth2\n\n/**\n * Default headers for executing OAuth 2.0 flows.\n */\nvar DEFAULT_HEADERS = {\n  'Accept': 'application/json, application/x-www-form-urlencoded',\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\n\n/**\n * Format error response types to regular strings for displaying to clients.\n *\n * Reference: http://tools.ietf.org/html/rfc6749#section-4.1.2.1\n */\nvar ERROR_RESPONSES = {\n  'invalid_request': [\n    'The request is missing a required parameter, includes an',\n    'invalid parameter value, includes a parameter more than',\n    'once, or is otherwise malformed.'\n  ].join(' '),\n  'invalid_client': [\n    'Client authentication failed (e.g., unknown client, no',\n    'client authentication included, or unsupported',\n    'authentication method).'\n  ].join(' '),\n  'invalid_grant': [\n    'The provided authorization grant (e.g., authorization',\n    'code, resource owner credentials) or refresh token is',\n    'invalid, expired, revoked, does not match the redirection',\n    'URI used in the authorization request, or was issued to',\n    'another client.'\n  ].join(' '),\n  'unauthorized_client': [\n    'The client is not authorized to request an authorization',\n    'code using this method.'\n  ].join(' '),\n  'unsupported_grant_type': [\n    'The authorization grant type is not supported by the',\n    'authorization server.'\n  ].join(' '),\n  'access_denied': [\n    'The resource owner or authorization server denied the request.'\n  ].join(' '),\n  'unsupported_response_type': [\n    'The authorization server does not support obtaining',\n    'an authorization code using this method.'\n  ].join(' '),\n  'invalid_scope': [\n    'The requested scope is invalid, unknown, or malformed.'\n  ].join(' '),\n  'server_error': [\n    'The authorization server encountered an unexpected',\n    'condition that prevented it from fulfilling the request.',\n    '(This error code is needed because a 500 Internal Server',\n    'Error HTTP status code cannot be returned to the client',\n    'via an HTTP redirect.)'\n  ].join(' '),\n  'temporarily_unavailable': [\n    'The authorization server is currently unable to handle',\n    'the request due to a temporary overloading or maintenance',\n    'of the server.'\n  ].join(' ')\n}\n\n/**\n * Support base64 in node like how it works in the browser.\n *\n * @param  {string} string\n * @return {string}\n */\nfunction btoaBuffer (string) {\n  return new Buffer(string).toString('base64')\n}\n\n/**\n * Check if properties exist on an object and throw when they aren't.\n *\n * @throws {TypeError} If an expected property is missing.\n *\n * @param {Object}    obj\n * @param {...string} props\n */\nfunction expects (obj) {\n  for (var i = 1; i < arguments.length; i++) {\n    var prop = arguments[i]\n\n    if (obj[prop] == null) {\n      throw new TypeError('Expected \"' + prop + '\" to exist')\n    }\n  }\n}\n\n/**\n * Pull an authentication error from the response data.\n *\n * @param  {Object} data\n * @return {string}\n */\nfunction getAuthError (body) {\n  var message = ERROR_RESPONSES[body.error] ||\n    body.error_description ||\n    body.error\n\n  if (message) {\n    var err = new Error(message)\n    err.body = body\n    err.code = 'EAUTH'\n    return err\n  }\n}\n\n/**\n * Attempt to parse response body as JSON, fall back to parsing as a query string.\n *\n * @param {string} body\n * @return {Object}\n */\nfunction parseResponseBody (body) {\n  try {\n    return JSON.parse(body)\n  } catch (e) {\n    return Querystring.parse(body)\n  }\n}\n\n/**\n * Sanitize the scopes option to be a string.\n *\n * @param  {Array}  scopes\n * @return {string}\n */\nfunction sanitizeScope (scopes) {\n  return Array.isArray(scopes) ? scopes.join(' ') : toString(scopes)\n}\n\n/**\n * Create a request uri based on an options object and token type.\n *\n * @param  {Object} options\n * @param  {string} tokenType\n * @return {string}\n */\nfunction createUri (options, tokenType) {\n  // Check the required parameters are set.\n  expects(options, 'clientId', 'authorizationUri')\n\n  return options.authorizationUri + '?' + Querystring.stringify(Object.assign({}, options.query, {\n    client_id: options.clientId,\n    redirect_uri: options.redirectUri,\n    scope: sanitizeScope(options.scopes),\n    response_type: tokenType,\n    state: options.state\n  }))\n}\n\n/**\n * Create basic auth header.\n *\n * @param  {string} username\n * @param  {string} password\n * @return {string}\n */\nfunction auth (username, password) {\n  return 'Basic ' + btoa(toString(username) + ':' + toString(password))\n}\n\n/**\n * Ensure a value is a string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction toString (str) {\n  return str == null ? '' : String(str)\n}\n\n/**\n * Merge request options from an options object.\n */\nfunction requestOptions (requestOptions, options) {\n  return {\n    url: requestOptions.url,\n    method: requestOptions.method,\n    body: Object.assign({}, requestOptions.body, options.body),\n    query: Object.assign({}, requestOptions.query, options.query),\n    headers: Object.assign({}, requestOptions.headers, options.headers)\n  }\n}\n\n/**\n * Construct an object that can handle the multiple OAuth 2.0 flows.\n *\n * @param {Object} options\n */\nfunction ClientOAuth2 (options, request) {\n  this.options = options\n  this.request = request || defaultRequest\n\n  this.code = new CodeFlow(this)\n  this.token = new TokenFlow(this)\n  this.owner = new OwnerFlow(this)\n  this.credentials = new CredentialsFlow(this)\n  this.jwt = new JwtBearerFlow(this)\n}\n\n/**\n * Alias the token constructor.\n *\n * @type {Function}\n */\nClientOAuth2.Token = ClientOAuth2Token\n\n/**\n * Create a new token from existing data.\n *\n * @param  {string} access\n * @param  {string} [refresh]\n * @param  {string} [type]\n * @param  {Object} [data]\n * @return {Object}\n */\nClientOAuth2.prototype.createToken = function (access, refresh, type, data) {\n  var options = Object.assign(\n    {},\n    data,\n    typeof access === 'string' ? { access_token: access } : access,\n    typeof refresh === 'string' ? { refresh_token: refresh } : refresh,\n    typeof type === 'string' ? { token_type: type } : type\n  )\n\n  return new ClientOAuth2.Token(this, options)\n}\n\n/**\n * Using the built-in request method, we'll automatically attempt to parse\n * the response.\n *\n * @param  {Object}  options\n * @return {Promise}\n */\nClientOAuth2.prototype._request = function (options) {\n  var url = options.url\n  var body = Querystring.stringify(options.body)\n  var query = Querystring.stringify(options.query)\n\n  if (query) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + query\n  }\n\n  return this.request(options.method, url, body, options.headers)\n    .then(function (res) {\n      var body = parseResponseBody(res.body)\n      var authErr = getAuthError(body)\n\n      if (authErr) {\n        return Promise.reject(authErr)\n      }\n\n      if (res.status < 200 || res.status >= 399) {\n        var statusErr = new Error('HTTP status ' + res.status)\n        statusErr.status = res.status\n        statusErr.body = res.body\n        statusErr.code = 'ESTATUS'\n        return Promise.reject(statusErr)\n      }\n\n      return body\n    })\n}\n\n/**\n * General purpose client token generator.\n *\n * @param {Object} client\n * @param {Object} data\n */\nfunction ClientOAuth2Token (client, data) {\n  this.client = client\n  this.data = data\n  this.tokenType = data.token_type && data.token_type.toLowerCase()\n  this.accessToken = data.access_token\n  this.refreshToken = data.refresh_token\n\n  this.expiresIn(Number(data.expires_in))\n}\n\n/**\n * Expire the token after some time.\n *\n * @param  {number|Date} duration Seconds from now to expire, or a date to expire on.\n * @return {Date}\n */\nClientOAuth2Token.prototype.expiresIn = function (duration) {\n  if (typeof duration === 'number') {\n    this.expires = new Date()\n    this.expires.setSeconds(this.expires.getSeconds() + duration)\n  } else if (duration instanceof Date) {\n    this.expires = new Date(duration.getTime())\n  } else {\n    throw new TypeError('Unknown duration: ' + duration)\n  }\n\n  return this.expires\n}\n\n/**\n * Sign a standardised request object with user authentication information.\n *\n * @param  {Object} requestObject\n * @return {Object}\n */\nClientOAuth2Token.prototype.sign = function (requestObject) {\n  if (!this.accessToken) {\n    throw new Error('Unable to sign without access token')\n  }\n\n  requestObject.headers = requestObject.headers || {}\n\n  if (this.tokenType === 'bearer') {\n    requestObject.headers.Authorization = 'Bearer ' + this.accessToken\n  } else {\n    var parts = requestObject.url.split('#')\n    var token = 'access_token=' + this.accessToken\n    var url = parts[0].replace(/[?&]access_token=[^&#]/, '')\n    var fragment = parts[1] ? '#' + parts[1] : ''\n\n    // Prepend the correct query string parameter to the url.\n    requestObject.url = url + (url.indexOf('?') > -1 ? '&' : '?') + token + fragment\n\n    // Attempt to avoid storing the url in proxies, since the access token\n    // is exposed in the query parameters.\n    requestObject.headers.Pragma = 'no-store'\n    requestObject.headers['Cache-Control'] = 'no-store'\n  }\n\n  return requestObject\n}\n\n/**\n * Refresh a user access token with the supplied token.\n *\n * @param  {Object}  opts\n * @return {Promise}\n */\nClientOAuth2Token.prototype.refresh = function (opts) {\n  var self = this\n  var options = Object.assign({}, this.client.options, opts)\n\n  if (!this.refreshToken) {\n    return Promise.reject(new Error('No refresh token'))\n  }\n\n  return this.client._request(requestOptions({\n    url: options.accessTokenUri,\n    method: 'POST',\n    headers: Object.assign({}, DEFAULT_HEADERS, {\n      Authorization: auth(options.clientId, options.clientSecret)\n    }),\n    body: {\n      refresh_token: this.refreshToken,\n      grant_type: 'refresh_token'\n    }\n  }, options))\n    .then(function (data) {\n      return self.client.createToken(Object.assign({}, self.data, data))\n    })\n}\n\n/**\n * Check whether the token has expired.\n *\n * @return {boolean}\n */\nClientOAuth2Token.prototype.expired = function () {\n  return Date.now() > this.expires.getTime()\n}\n\n/**\n * Support resource owner password credentials OAuth 2.0 grant.\n *\n * Reference: http://tools.ietf.org/html/rfc6749#section-4.3\n *\n * @param {ClientOAuth2} client\n */\nfunction OwnerFlow (client) {\n  this.client = client\n}\n\n/**\n * Make a request on behalf of the user credentials to get an acces token.\n *\n * @param  {string}  username\n * @param  {string}  password\n * @param  {Object}  [opts]\n * @return {Promise}\n */\nOwnerFlow.prototype.getToken = function (username, password, opts) {\n  var self = this\n  var options = Object.assign({}, this.client.options, opts)\n\n  return this.client._request(requestOptions({\n    url: options.accessTokenUri,\n    method: 'POST',\n    headers: Object.assign({}, DEFAULT_HEADERS, {\n      Authorization: auth(options.clientId, options.clientSecret)\n    }),\n    body: {\n      scope: sanitizeScope(options.scopes),\n      username: username,\n      password: password,\n      grant_type: 'password'\n    }\n  }, options))\n    .then(function (data) {\n      return self.client.createToken(data)\n    })\n}\n\n/**\n * Support implicit OAuth 2.0 grant.\n *\n * Reference: http://tools.ietf.org/html/rfc6749#section-4.2\n *\n * @param {ClientOAuth2} client\n */\nfunction TokenFlow (client) {\n  this.client = client\n}\n\n/**\n * Get the uri to redirect the user to for implicit authentication.\n *\n * @param  {Object} [opts]\n * @return {string}\n */\nTokenFlow.prototype.getUri = function (opts) {\n  var options = Object.assign({}, this.client.options, opts)\n\n  return createUri(options, 'token')\n}\n\n/**\n * Get the user access token from the uri.\n *\n * @param  {string|Object} uri\n * @param  {Object}        [opts]\n * @return {Promise}\n */\nTokenFlow.prototype.getToken = function (uri, opts) {\n  var options = Object.assign({}, this.client.options, opts)\n  var url = typeof uri === 'object' ? uri : Url.parse(uri, true)\n  var expectedUrl = Url.parse(options.redirectUri)\n\n  if (typeof url.pathname === 'string' && url.pathname !== expectedUrl.pathname) {\n    return Promise.reject(\n      new TypeError('Redirected path should match configured path, but got: ' + url.pathname)\n    )\n  }\n\n  // If no query string or fragment exists, we won't be able to parse\n  // any useful information from the uri.\n  if (!url.hash && !url.query) {\n    return Promise.reject(new TypeError('Unable to process uri: ' + uri))\n  }\n\n  // Extract data from both the fragment and query string. The fragment is most\n  // important, but the query string is also used because some OAuth 2.0\n  // implementations (Instagram) have a bug where state is passed via query.\n  var data = Object.assign(\n    {},\n    typeof url.query === 'string' ? Querystring.parse(url.query) : (url.query || {}),\n    typeof url.hash === 'string' ? Querystring.parse(url.hash.substr(1)) : (url.hash || {})\n  )\n\n  var err = getAuthError(data)\n\n  // Check if the query string was populated with a known error.\n  if (err) {\n    return Promise.reject(err)\n  }\n\n  // Check whether the state matches.\n  if (options.state != null && data.state !== options.state) {\n    return Promise.reject(new TypeError('Invalid state: ' + data.state))\n  }\n\n  // Initalize a new token and return.\n  return Promise.resolve(this.client.createToken(data))\n}\n\n/**\n * Support client credentials OAuth 2.0 grant.\n *\n * Reference: http://tools.ietf.org/html/rfc6749#section-4.4\n *\n * @param {ClientOAuth2} client\n */\nfunction CredentialsFlow (client) {\n  this.client = client\n}\n\n/**\n * Request an access token using the client credentials.\n *\n * @param  {Object}  [opts]\n * @return {Promise}\n */\nCredentialsFlow.prototype.getToken = function (opts) {\n  var self = this\n  var options = Object.assign({}, this.client.options, opts)\n\n  expects(options, 'clientId', 'clientSecret', 'accessTokenUri')\n\n  return this.client._request(requestOptions({\n    url: options.accessTokenUri,\n    method: 'POST',\n    headers: Object.assign({}, DEFAULT_HEADERS, {\n      Authorization: auth(options.clientId, options.clientSecret)\n    }),\n    body: {\n      scope: sanitizeScope(options.scopes),\n      grant_type: 'client_credentials'\n    }\n  }, options))\n    .then(function (data) {\n      return self.client.createToken(data)\n    })\n}\n\n/**\n * Support authorization code OAuth 2.0 grant.\n *\n * Reference: http://tools.ietf.org/html/rfc6749#section-4.1\n *\n * @param {ClientOAuth2} client\n */\nfunction CodeFlow (client) {\n  this.client = client\n}\n\n/**\n * Generate the uri for doing the first redirect.\n *\n * @param  {Object} [opts]\n * @return {string}\n */\nCodeFlow.prototype.getUri = function (opts) {\n  var options = Object.assign({}, this.client.options, opts)\n\n  return createUri(options, 'code')\n}\n\n/**\n * Get the code token from the redirected uri and make another request for\n * the user access token.\n *\n * @param  {string|Object} uri\n * @param  {Object}        [opts]\n * @return {Promise}\n */\nCodeFlow.prototype.getToken = function (uri, opts) {\n  var self = this\n  var options = Object.assign({}, this.client.options, opts)\n\n  expects(options, 'clientId', 'accessTokenUri')\n\n  var url = typeof uri === 'object' ? uri : Url.parse(uri, true)\n\n  if (\n    typeof options.redirectUri === 'string' &&\n    typeof url.pathname === 'string' &&\n    url.pathname !== Url.parse(options.redirectUri).pathname\n  ) {\n    return Promise.reject(\n      new TypeError('Redirected path should match configured path, but got: ' + url.pathname)\n    )\n  }\n\n  if (!url.query) {\n    return Promise.reject(new TypeError('Unable to process uri: ' + uri))\n  }\n\n  var data = typeof url.query === 'string' ? Querystring.parse(url.query) : (url.query || {})\n  var err = getAuthError(data)\n\n  if (err) {\n    return Promise.reject(err)\n  }\n\n  if (options.state != null && data.state !== options.state) {\n    return Promise.reject(new TypeError('Invalid state: ' + data.state))\n  }\n\n  // Check whether the response code is set.\n  if (!data.code) {\n    return Promise.reject(new TypeError('Missing code, unable to request token'))\n  }\n\n  var headers = Object.assign({}, DEFAULT_HEADERS)\n  var body = { code: data.code, grant_type: 'authorization_code', redirect_uri: options.redirectUri }\n\n  // `client_id`: REQUIRED, if the client is not authenticating with the\n  // authorization server as described in Section 3.2.1.\n  // Reference: https://tools.ietf.org/html/rfc6749#section-3.2.1\n  if (options.clientSecret) {\n    headers.Authorization = auth(options.clientId, options.clientSecret)\n  } else {\n    body.client_id = options.clientId\n  }\n\n  return this.client._request(requestOptions({\n    url: options.accessTokenUri,\n    method: 'POST',\n    headers: headers,\n    body: body\n  }, options))\n    .then(function (data) {\n      return self.client.createToken(data)\n    })\n}\n\n/**\n * Support JSON Web Token (JWT) Bearer Token OAuth 2.0 grant.\n *\n * Reference: https://tools.ietf.org/html/draft-ietf-oauth-jwt-bearer-12#section-2.1\n *\n * @param {ClientOAuth2} client\n */\nfunction JwtBearerFlow (client) {\n  this.client = client\n}\n\n/**\n * Request an access token using a JWT token.\n *\n * @param  {string} token     A JWT token.\n * @param  {Object} [opts]\n * @return {Promise}\n */\nJwtBearerFlow.prototype.getToken = function (token, opts) {\n  var self = this\n  var options = Object.assign({}, this.client.options, opts)\n  var headers = Object.assign({}, DEFAULT_HEADERS)\n\n  expects(options, 'accessTokenUri')\n\n  // Authentication of the client is optional, as described in\n  // Section 3.2.1 of OAuth 2.0 [RFC6749]\n  if (options.clientId) {\n    headers['Authorization'] = auth(options.clientId, options.clientSecret)\n  }\n\n  return this.client._request(requestOptions({\n    url: options.accessTokenUri,\n    method: 'POST',\n    headers: headers,\n    body: {\n      scope: sanitizeScope(options.scopes),\n      grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n      assertion: token\n    }\n  }, options))\n    .then(function (data) {\n      return self.client.createToken(data)\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-client-oauth2/node_modules/client-oauth2/src/request/index.js":"var popsicle = require('popsicle')\n\n/**\n * Make a request using node.\n *\n * @param   {string}  method\n * @param   {string}  url\n * @param   {string}  body\n * @param   {Object}  headers\n * @returns {Promise}\n */\nmodule.exports = function request (method, url, body, headers) {\n  return popsicle.get({\n    url: url,\n    body: body,\n    method: method,\n    headers: headers\n  }).then(function (res) {\n    return {\n      status: res.status,\n      body: res.body\n    }\n  })\n}\n"}